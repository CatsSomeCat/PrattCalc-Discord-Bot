name: Rust CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]


# Global Environment Variables
env:
  CARGO_TERM_COLOR: always     # Always colorize cargo output
  RUST_VERSION: stable         # Default Rust toolchain version
  CARGO_HOME: ~/.cargo         # Cargo home directory
  CARGO_TARGET_DIR: target     # Build output directory
  RUN_LINT: false              # Set to 'false' to skip clippy and formatting checks
  RUN_TESTS: false             # Set to 'false' to skip running tests
  RUN_ARTIFACTS: true          # Build and upload artifacts if true

jobs:
  ci:
    name: Rust CI (${{ matrix.os }} / ${{ matrix.rust }})
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            rust: stable
            target: x86_64-unknown-linux-gnu
            artifact_path: target/release/
          - os: windows-latest
            rust: stable
            target: x86_64-pc-windows-msvc
            artifact_path: target\\release\\
          - os: macos-latest
            rust: stable
            target: x86_64-apple-darwin
            artifact_path: target/release/
          - os: ubuntu-latest
            rust: nightly
            target: x86_64-unknown-linux-gnu
            artifact_path: target/release/
          - os: windows-latest
            rust: nightly
            target: x86_64-pc-windows-msvc
            artifact_path: target\\release\\

    steps:
      # Checkout repository code
      - name: Checkout code
        uses: actions/checkout@v4

      # Set up Rust toolchain (stable or nightly)
      - name: Set up Rust (${{ matrix.rust }})
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.rust }}
          override: true
          targets: ${{ matrix.target }}
          components: rustfmt, clippy

      # Ensure target triple is installed for all platforms
      - name: Ensure Rust target is installed
        run: rustup target add ${{ matrix.target }}
        
      # Show Rust version info
      - name: Show Rust version
        run: rustc --version && cargo --version

      # Cache dependencies and builds
      - name: Cache Rust build
        uses: Swatinem/rust-cache@v2
        with:
          key: ${{ runner.os }}-${{ matrix.rust }}-${{ hashFiles('**/Cargo.lock') }}

      # Run clippy linter (if enabled and on stable)
      - name: Lint with Clippy
        if: env.RUN_LINT == 'true' && matrix.rust == 'stable'
        run: cargo clippy --all-targets --all-features -- -D warnings

      # Check formatting with rustfmt (if enabled and on stable)
      - name: Check formatting
        if: env.RUN_LINT == 'true' && matrix.rust == 'stable'
        run: cargo fmt --all -- --check

      # Run tests (if enabled)
      - name: Run tests
        if: env.RUN_TESTS == 'true'
        run: cargo test --all-features --verbose --target ${{ matrix.target }}

      # Build release binaries
      - name: Build release binaries
        run: cargo build --release --bins --all-features --verbose --target ${{ matrix.target }}

      # Output build directory contents for verification
      - name: Verify build output
        run: |
          echo "Build verification:"
          echo "Current directory: $(pwd)"
          echo "Contents of target directory:"
          ls -laR target/

      # Prepare artifact files from build (if enabled)
      - name: Prepare artifacts
        if: github.ref == 'refs/heads/main' && matrix.rust == 'stable' && env.RUN_ARTIFACTS == 'true'
        run: |
          mkdir -p artifacts

          echo "Listing release dir: ${{ matrix.artifact_path }}"
          ls -la "${{ matrix.artifact_path }}"

          BINARIES=$(cargo metadata --format-version=1 --no-deps | jq -r '.packages[].targets[] | select(.kind[] == "bin") | .name')

          for BIN in $BINARIES; do
            for EXT in "" ".exe"; do
              BIN_PATH="${{ matrix.artifact_path }}${BIN}${EXT}"
              if [ -f "$BIN_PATH" ]; then
                echo "Copying $BIN_PATH"
                cp "$BIN_PATH" artifacts/
              fi
            done
          done

          echo "Final artifacts directory contents:"
          ls -la artifacts/
        shell: bash

      # Upload artifact files (if enabled)
      - name: Upload build artifacts
        if: github.ref == 'refs/heads/main' && matrix.rust == 'stable' && env.RUN_ARTIFACTS == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.os }}-binaries-${{ github.sha }}
          path: artifacts/
          retention-days: 7

// Complex Expressions Example

// Operator precedence
let precedence1 = 2 + 3 * 4;           // 2 + (3 * 4) = 2 + 12 = 14
let precedence2 = (2 + 3) * 4;          // (2 + 3) * 4 = 5 * 4 = 20
let precedence3 = 2 + 3 * 4 ^ 2;        // 2 + 3 * (4 ^ 2) = 2 + 3 * 16 = 2 + 48 = 50
let precedence4 = 10 - 2 - 3;           // (10 - 2) - 3 = 8 - 3 = 5
let precedence5 = 2 ^ 3 ^ 2;            // 2 ^ (3 ^ 2) = 2 ^ 9 = 512 (right associative)

// Complex arithmetic
let complex1 = (5 + 3) * 2 / (7 - 4) ^ 2; // (8 * 2) / 9 = 16 / 9 ≈ 1.78
let complex2 = 100 / (5 + 5) * 2 + 3;     // (100 / 10) * 2 + 3 = 10 * 2 + 3 = 23

// Nested parentheses
let nested1 = ((((1 + 2) * (3 - 1)) / 2) ^ 2) - 1; // ((3 * 2) / 2)^2 - 1 = 3^2 - 1 = 9 - 1 = 8
let nested2 = (((1 + 2) * 3) - ((4 + 5) / 3));     // (3 * 3) - (9 / 3) = 9 - 3 = 6

// Compound expressions with functions
let compound1 = sin(PI/4) * sqrt(2);             // ~1.0
let compound2 = abs(-5) / log(E * 2);            // 5 / log(2*e) ≈ 5 / 1.693 ≈ 2.95
let compound3 = min(max(5, 10), max(15, 20));    // min(10, 20) = 10

// Operations with constants
let const_expr1 = PI * 10 ^ 2;                   // Area of circle with radius 10
let const_expr2 = E ^ 2 + sqrt(PHI);             // e^2 + √φ ≈ 7.389 + 1.272 ≈ 8.661

// Mixed number types
let mixed1 = 0xFF + 0b1010 + 15.5;               // 255 + 10 + 15.5 = 280.5
let mixed2 = 0x100 / 0b100 * 2.5;                // 256 / 4 * 2.5 = 64 * 2.5 = 160

// Chained function calls
let chained1 = sqrt(abs(sin(PI) * -10));         // sqrt(abs(-0 * -10)) = sqrt(0) = 0
let chained2 = log(abs(cos(PI) + 1));            // log(abs(-1 + 1)) = log(0) = ERROR!

// Extreme values
let extreme1 = 1000000 * 1000000;                // 10^12
let extreme2 = 0.0000001 * 10000000;             // 10^-7 * 10^7 = 1

// Complex expression combining multiple elements
let final_expression = 
    (5 + 10 * 2) / (sin(PI/6) + cos(PI/3)) * 
    sqrt(abs(-25)) + min(100, max(10, 50)) + 
    (PI * 3 ^ 2);

// final_expression calculation:
// (5 + 10 * 2) / (sin(PI/6) + cos(PI/3)) * sqrt(abs(-25)) + min(100, max(10, 50)) + (PI * 3 ^ 2)
// (5 + 20) / (0.5 + 0.5) * sqrt(25) + min(100, 50) + (PI * 9)
// 25 / 1 * 5 + 50 + (PI * 9)
// 125 + 50 + 28.27
// ≈ 203.27

end final_expression; 